name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  # Frontend ユニットテスト
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --workspaces --include-workspace-root

      - name: Run frontend unit tests
        run: npm run test:unit
        env:
          CI: true

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 30

  # Backend ユニットテスト
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd api
          npm ci

      - name: Run backend unit tests
        run: |
          cd api
          npm test
        env:
          CI: true

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: api/coverage/
          retention-days: 30

  # Lint & Type Check
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --workspaces --include-workspace-root

      - name: Run linter
        run: npm run lint

      - name: Type check
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # 全テスト結果の集計
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests, code-quality]
    if: always()

    steps:
      - name: Create test summary
        run: |
          echo "# 🧪 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend Unit Tests: ${{ needs.frontend-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend Unit Tests: ${{ needs.backend-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.frontend-unit-tests.result }}" == "success" ] && \
             [ "${{ needs.backend-unit-tests.result }}" == "success" ] && \
             [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "## 🎉 All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # デプロイメントゲート (PRのみ)
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests, code-quality]
    if: github.event_name == 'pull_request'

    steps:
      - name: Check all test results
        run: |
          echo "✅ All tests and quality checks passed"
          echo "🚀 Ready for deployment"

      - name: Comment PR with success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All tests passed! Ready for deployment.\n\n**Test Summary:**\n- Frontend Unit Tests: ✅\n- Backend Unit Tests: ✅\n- Code Quality: ✅'
            });

      - name: Block deployment on failure
        if: failure()
        run: |
          echo "❌ Tests failed - blocking deployment"
          exit 1

  # Azure Static Web Apps デプロイ (mainブランチへのpush時のみ)
  deploy:
    name: Deploy to Azure
    needs: [frontend-unit-tests, backend-unit-tests, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/azure-static-web-apps-orange-stone-066c2d600.yml
    secrets: inherit
